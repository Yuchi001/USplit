// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using USplitAPI.Data;

#nullable disable

namespace USplitAPI.Migrations
{
    [DbContext(typeof(USplitDBContext))]
    [Migration("20250720120105_AdjustedKeySettings")]
    partial class AdjustedKeySettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("USplitAPI.Domain.CurrentBalanceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UserId");

                    b.ToTable("CurrentBalanceEntity");
                });

            modelBuilder.Entity("USplitAPI.Domain.FamilyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("USplitAPI.Domain.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("USplitAPI.Domain.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("USplitAPI.Domain.UserFamilyJoinedEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "FamilyId");

                    b.HasIndex("FamilyId");

                    b.ToTable("UserFamilyJoinedEntity");
                });

            modelBuilder.Entity("USplitAPI.Domain.CurrentBalanceEntity", b =>
                {
                    b.HasOne("USplitAPI.Domain.FamilyEntity", "Family")
                        .WithMany("CurrentBalanceList")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USplitAPI.Domain.UserEntity", "User")
                        .WithMany("CurrentBalanceList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("USplitAPI.Domain.TransactionEntity", b =>
                {
                    b.HasOne("USplitAPI.Domain.FamilyEntity", "Family")
                        .WithMany("TransactionList")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USplitAPI.Domain.UserEntity", "User")
                        .WithMany("TransactionList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("USplitAPI.Domain.UserFamilyJoinedEntity", b =>
                {
                    b.HasOne("USplitAPI.Domain.FamilyEntity", "Family")
                        .WithMany("UserFamilyList")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USplitAPI.Domain.UserEntity", "User")
                        .WithMany("UserFamilyList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("USplitAPI.Domain.FamilyEntity", b =>
                {
                    b.Navigation("CurrentBalanceList");

                    b.Navigation("TransactionList");

                    b.Navigation("UserFamilyList");
                });

            modelBuilder.Entity("USplitAPI.Domain.UserEntity", b =>
                {
                    b.Navigation("CurrentBalanceList");

                    b.Navigation("TransactionList");

                    b.Navigation("UserFamilyList");
                });
#pragma warning restore 612, 618
        }
    }
}
